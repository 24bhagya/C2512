1.What is virtual function and pure virtual function.?


virtual function:  `Virtual functions` allow a function to be overridden in a derived class.
The function is called based on the actual object type at runtime, not the pointer type.

- `Virtual` function allows runtime polymorphism.
- It must be defined with the `virtual` keyword in the base class.

`Example:`
```cpp
class Base {
public:
    virtual void show() {
        std::cout << "Base class show" << std::endl;
    }
};

class Derived : public Base {
public:
    void show() override {
        std::cout << "Derived class show" << std::endl;
    }
};
```
What is a Pure Virtual Function?
        Pure virtual function is a function that is declared in a base class but does not have a body (i.e., no implementation).
        It is meant to be overridden (redefined) by derived classes.
        A pure virtual function makes the class abstract, meaning the base class cannot be instantiated on its own.

eg:

        class Base {
        public:
            virtual void function() = 0;  // Pure virtual function
        };

3.Why do we need run time polymorphism. 





